# bootstrap-android-shell.ps1
# 목적: Android Studio/gradle 미설치 환경에서 최소 WebView 셸을 빌드/설치
# 요구: JDK(11~21 권장), ANDROID SDK(emulator만 있어도 OK), adb 사용 가능
# 참고: sdk.dir은 %LOCALAPPDATA%\Android\sdk 로 가정

$ErrorActionPreference = 'Stop'

# 설정
$AppId = "com.example.shell"
$AppName = "android-shell"
$SdkDir = Join-Path $env:LOCALAPPDATA "Android\sdk"     # 기존 SDK 경로 가정
$CompileSdk = 34
$MinSdk = 24
$TargetSdk = 34
$GradleVersion = "8.9"                                   # Gradle Wrapper가 받는 배포판
$AgpVersion = "8.6.1"                                    # Android Gradle Plugin 버전 (Gradle 8.9 호환)
$KotlinVersion = "1.9.24"                                # 안정 조합

# 경로
$Root = Convert-Path "."
$Proj = Join-Path $Root "android-shell"
$App = Join-Path $Proj "app"
$MainSrc = Join-Path $App "src\main"
$JavaDir = Join-Path $MainSrc ("java\" + ($AppId -replace '\.', '\\'))
$ResXml = Join-Path $MainSrc "res\xml"
$GradleDir = Join-Path $Proj "gradle\wrapper"

# 폴더 생성
New-Item -ItemType Directory -Force -Path $JavaDir      | Out-Null
New-Item -ItemType Directory -Force -Path $ResXml       | Out-Null
New-Item -ItemType Directory -Force -Path $GradleDir    | Out-Null

# settings.gradle
@"
pluginManagement {
  repositories {
    gradlePluginPortal()
    google()
    mavenCentral()
  }
}
dependencyResolutionManagement {
  repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
  repositories {
    google()
    mavenCentral()
  }
}
rootProject.name = "$AppName"
include(":app")
"@ | Set-Content -Encoding UTF8 (Join-Path $Proj "settings.gradle")

# 루트 build.gradle
@"
buildscript {
  repositories {
    google()
    mavenCentral()
  }
  dependencies {
    classpath "com.android.tools.build:gradle:$AgpVersion"
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$KotlinVersion"
  }
}
allprojects {
  repositories {
    google()
    mavenCentral()
  }
}
"@ | Set-Content -Encoding UTF8 (Join-Path $Proj "build.gradle")

# app/build.gradle
@"
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

android {
  namespace '$AppId'
  compileSdk $CompileSdk

  defaultConfig {
    applicationId '$AppId'
    minSdk $MinSdk
    targetSdk $TargetSdk
    versionCode 1
    versionName "1.0"
  }

  buildTypes {
    debug {
      debuggable true
    }
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
    }
  }
}

dependencies {
  implementation "org.jetbrains.kotlin:kotlin-stdlib:$KotlinVersion"
  implementation 'androidx.activity:activity-ktx:1.9.0'
}
"@ | Set-Content -Encoding UTF8 (Join-Path $App "build.gradle")

# gradle.properties
@"
org.gradle.jvmargs=-Xmx2g -Dfile.encoding=UTF-8
android.useAndroidX=true
"@ | Set-Content -Encoding UTF8 (Join-Path $Proj "gradle.properties")

# local.properties (SDK 경로 지정)
@"
sdk.dir=$($SdkDir -replace '\\','\\')
"@ | Set-Content -Encoding UTF8 (Join-Path $Proj "local.properties")

# proguard
@"
-dontwarn **
-ignorewarnings
"@ | Set-Content -Encoding UTF8 (Join-Path $App "proguard-rules.pro")

# AndroidManifest.xml
@"
<manifest package="$AppId" xmlns:android="http://schemas.android.com/apk/res/android">
  <uses-permission android:name="android.permission.INTERNET" />
  <application
      android:usesCleartextTraffic="true"
      android:networkSecurityConfig="@xml/network_security_config"
      android:debuggable="true"
      android:allowBackup="false">
    <activity android:name=".MainActivity"
              android:exported="true"
              android:configChanges="orientation|screenSize|keyboardHidden">
      <intent-filter>
        <action android:name="android.intent.action.MAIN"/>
        <category android:name="android.intent.category.LAUNCHER"/>
      </intent-filter>
    </activity>
  </application>
</manifest>
"@ | Set-Content -Encoding UTF8 (Join-Path $MainSrc "AndroidManifest.xml")

# network_security_config.xml
@"
<?xml version="1.0" encoding="utf-8"?>
<network-security-config>
  <domain-config cleartextTrafficPermitted="true">
    <domain includeSubdomains="true">10.0.2.2</domain>
    <domain includeSubdomains="true">localhost</domain>
  </domain-config>
</network-security-config>
"@ | Set-Content -Encoding UTF8 (Join-Path $ResXml "network_security_config.xml")

# MainActivity.kt (WebView로 Vite dev 서버 로드)
@"
package $AppId

import android.annotation.SuppressLint
import android.os.Bundle
import android.webkit.WebChromeClient
import android.webkit.WebSettings
import android.webkit.WebView
import android.webkit.WebViewClient
import androidx.activity.ComponentActivity

class MainActivity : ComponentActivity() {
    private lateinit var webView: WebView

    @SuppressLint("SetJavaScriptEnabled")
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        webView = WebView(this)
        setContentView(webView)

        val s: WebSettings = webView.settings
        s.javaScriptEnabled = true
        s.domStorageEnabled = true
        s.cacheMode = WebSettings.LOAD_NO_CACHE
        s.mixedContentMode = WebSettings.MIXED_CONTENT_COMPATIBILITY_MODE

        WebView.setWebContentsDebuggingEnabled(true)
        webView.webViewClient = object : WebViewClient() {}
        webView.webChromeClient = WebChromeClient()

        val devUrl = "http://10.0.2.2:5173/"
        webView.loadUrl(devUrl)
    }

    override fun onBackPressed() {
        if (::webView.isInitialized && webView.canGoBack()) {
            webView.goBack()
        } else {
            super.onBackPressed()
        }
    }
}
"@ | Set-Content -Encoding UTF8 (Join-Path $JavaDir "MainActivity.kt")

# gradlew / gradlew.bat 스크립트 내려받기 & wrapper JAR/설정 생성
# 공식 Gradle 래퍼 스크립트/자르는 Gradle 배포판에 포함되어 있지만, 여기선 원격에서 취득
$GradlewUrl      = "https://raw.githubusercontent.com/gradle/gradle/v$GradleVersion/gradlew"
$GradlewBatUrl   = "https://raw.githubusercontent.com/gradle/gradle/v$GradleVersion/gradlew.bat"
$WrapperJarUrl   = "https://services.gradle.org/distributions/gradle-$GradleVersion-wrapper.jar"
$WrapperPropPath = Join-Path $GradleDir "gradle-wrapper.properties"
$WrapperJarPath  = Join-Path $GradleDir "gradle-wrapper.jar"

Invoke-WebRequest $GradlewUrl    -OutFile (Join-Path $Proj "gradlew")      -UseBasicParsing
Invoke-WebRequest $GradlewBatUrl -OutFile (Join-Path $Proj "gradlew.bat")  -UseBasicParsing
Invoke-WebRequest $WrapperJarUrl -OutFile $WrapperJarPath                  -UseBasicParsing

# gradle-wrapper.properties 작성 (배포판 zip 지정)
@"
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-$GradleVersion-bin.zip
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists
"@ | Set-Content -Encoding UTF8 $WrapperPropPath

# 실행 권한 (Windows에선 무시 가능하지만 Git Bash 대비)
try { & icacls (Join-Path $Proj "gradlew") /grant "*S-1-1-0:(RX)" | Out-Null } catch {}

Write-Host "`n[+] Project ready at $Proj" -ForegroundColor Cyan

# 빌드, 설치, 실행
Push-Location $Proj
try {
  Write-Host "`n[+] Building debug APK via Gradle Wrapper..." -ForegroundColor Cyan
  & .\gradlew.bat :app:installDebug

  Write-Host "`n[+] Launching app on emulator..." -ForegroundColor Cyan
  & adb shell am start -n "$AppId/.MainActivity"
}
finally {
  Pop-Location
}

Write-Host "`n✔ Done. Now start your Vite dev server on :5173 and see it inside the emulator WebView." -ForegroundColor Green
